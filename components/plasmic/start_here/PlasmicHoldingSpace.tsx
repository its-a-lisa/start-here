// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: c8HQ4QDrdFixJwisZHdvQZ
// Component: sWar1oSBzZRT

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import DefaultLayout from "../../DefaultLayout"; // plasmic-import: A2d7WnFA90Fs/component
import Button from "../../Button"; // plasmic-import: KaXI-_rb8Hbz/component
import Nav from "../../Nav"; // plasmic-import: mWZvhL92Ok8N/component
import Logo from "../../Logo"; // plasmic-import: eqWxOKkmGwmo/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_start_here.module.css"; // plasmic-import: c8HQ4QDrdFixJwisZHdvQZ/projectcss
import sty from "./PlasmicHoldingSpace.module.css"; // plasmic-import: sWar1oSBzZRT/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: Rjr6r3-9QxlW/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: qWMN0DGk7j4M/icon

createPlasmicElementProxy;

export type PlasmicHoldingSpace__VariantMembers = {};
export type PlasmicHoldingSpace__VariantsArgs = {};
type VariantPropType = keyof PlasmicHoldingSpace__VariantsArgs;
export const PlasmicHoldingSpace__VariantProps = new Array<VariantPropType>();

export type PlasmicHoldingSpace__ArgsType = {};
type ArgPropType = keyof PlasmicHoldingSpace__ArgsType;
export const PlasmicHoldingSpace__ArgProps = new Array<ArgPropType>();

export type PlasmicHoldingSpace__OverridesType = {
  root?: p.Flex<typeof DefaultLayout>;
  h1?: p.Flex<"h1">;
  nav?: p.Flex<typeof Nav>;
  logo?: p.Flex<typeof Logo>;
};

export interface DefaultHoldingSpaceProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHoldingSpace__RenderFunc(props: {
  variants: PlasmicHoldingSpace__VariantsArgs;
  args: PlasmicHoldingSpace__ArgsType;
  overrides: PlasmicHoldingSpace__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <DefaultLayout
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames("__wab_instance", sty.root)}
          slot={
            <Nav
              data-plasmic-name={"nav"}
              data-plasmic-override={overrides.nav}
              brandLogo={
                <Logo
                  data-plasmic-name={"logo"}
                  data-plasmic-override={overrides.logo}
                  className={classNames("__wab_instance", sty.logo)}
                />
              }
              className={classNames("__wab_instance", sty.nav)}
              userState={"repeatUser"}
            />
          }
        >
          <div className={classNames(projectcss.all, sty.freeBox___2MGx8)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__hC0A6)}
            >
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                {"Welcome, !"}
              </h1>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jCBjL)}
              >
                <Button
                  className={classNames("__wab_instance", sty.button__un0Eu)}
                  link={`/protected-page`}
                >
                  {"Go to Protect Page"}
                </Button>
                <Button
                  className={classNames("__wab_instance", sty.button___7WeRo)}
                >
                  {"See Protected Information"}
                </Button>
              </p.Stack>
            </p.Stack>
          </div>
        </DefaultLayout>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h1", "nav", "logo"],
  h1: ["h1"],
  nav: ["nav", "logo"],
  logo: ["logo"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof DefaultLayout;
  h1: "h1";
  nav: typeof Nav;
  logo: typeof Logo;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHoldingSpace__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHoldingSpace__VariantsArgs;
    args?: PlasmicHoldingSpace__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHoldingSpace__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHoldingSpace__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHoldingSpace__ArgProps,
          internalVariantPropNames: PlasmicHoldingSpace__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHoldingSpace__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHoldingSpace";
  } else {
    func.displayName = `PlasmicHoldingSpace.${nodeName}`;
  }
  return func;
}

export const PlasmicHoldingSpace = Object.assign(
  // Top-level PlasmicHoldingSpace renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    nav: makeNodeComponent("nav"),
    logo: makeNodeComponent("logo"),

    // Metadata about props expected for PlasmicHoldingSpace
    internalVariantProps: PlasmicHoldingSpace__VariantProps,
    internalArgProps: PlasmicHoldingSpace__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHoldingSpace;
/* prettier-ignore-end */
