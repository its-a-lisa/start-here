// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: c8HQ4QDrdFixJwisZHdvQZ
// Component: bchzmV_R7EgE

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import DefaultLayout from "../../DefaultLayout"; // plasmic-import: A2d7WnFA90Fs/component
import Nav from "../../Nav"; // plasmic-import: mWZvhL92Ok8N/component
import Logo from "../../Logo"; // plasmic-import: eqWxOKkmGwmo/component
import Button from "../../Button"; // plasmic-import: KaXI-_rb8Hbz/component
import SignoutButton from "../../SignoutButton"; // plasmic-import: HsD9axl_NxPj/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_start_here.module.css"; // plasmic-import: c8HQ4QDrdFixJwisZHdvQZ/projectcss
import sty from "./PlasmicProtectedPage.module.css"; // plasmic-import: bchzmV_R7EgE/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: Rjr6r3-9QxlW/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: qWMN0DGk7j4M/icon

createPlasmicElementProxy;

export type PlasmicProtectedPage__VariantMembers = {};
export type PlasmicProtectedPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicProtectedPage__VariantsArgs;
export const PlasmicProtectedPage__VariantProps = new Array<VariantPropType>();

export type PlasmicProtectedPage__ArgsType = {};
type ArgPropType = keyof PlasmicProtectedPage__ArgsType;
export const PlasmicProtectedPage__ArgProps = new Array<ArgPropType>();

export type PlasmicProtectedPage__OverridesType = {
  root?: p.Flex<typeof DefaultLayout>;
  freeBox?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  nav?: p.Flex<typeof Nav>;
  logo?: p.Flex<typeof Logo>;
  signoutButton?: p.Flex<typeof SignoutButton>;
};

export interface DefaultProtectedPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProtectedPage__RenderFunc(props: {
  variants: PlasmicProtectedPage__VariantsArgs;
  args: PlasmicProtectedPage__ArgsType;
  overrides: PlasmicProtectedPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <DefaultLayout
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames("__wab_instance", sty.root)}
          slot={
            <Nav
              data-plasmic-name={"nav"}
              data-plasmic-override={overrides.nav}
              brandLogo={
                <Logo
                  data-plasmic-name={"logo"}
                  data-plasmic-override={overrides.logo}
                  className={classNames("__wab_instance", sty.logo)}
                />
              }
              className={classNames("__wab_instance", sty.nav)}
              logOutButton2={
                <SignoutButton
                  data-plasmic-name={"signoutButton"}
                  data-plasmic-override={overrides.signoutButton}
                  className={classNames("__wab_instance", sty.signoutButton)}
                />
              }
              userState={"signedIn"}
            />
          }
        >
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {
                "You can only see this when you're logged in.\n\nYou are logged in as ..."
              }
            </h1>
          </div>
        </DefaultLayout>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "h1", "nav", "logo", "signoutButton"],
  freeBox: ["freeBox", "h1"],
  h1: ["h1"],
  nav: ["nav", "logo", "signoutButton"],
  logo: ["logo"],
  signoutButton: ["signoutButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof DefaultLayout;
  freeBox: "div";
  h1: "h1";
  nav: typeof Nav;
  logo: typeof Logo;
  signoutButton: typeof SignoutButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProtectedPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProtectedPage__VariantsArgs;
    args?: PlasmicProtectedPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProtectedPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProtectedPage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProtectedPage__ArgProps,
          internalVariantPropNames: PlasmicProtectedPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProtectedPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProtectedPage";
  } else {
    func.displayName = `PlasmicProtectedPage.${nodeName}`;
  }
  return func;
}

export const PlasmicProtectedPage = Object.assign(
  // Top-level PlasmicProtectedPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    h1: makeNodeComponent("h1"),
    nav: makeNodeComponent("nav"),
    logo: makeNodeComponent("logo"),
    signoutButton: makeNodeComponent("signoutButton"),

    // Metadata about props expected for PlasmicProtectedPage
    internalVariantProps: PlasmicProtectedPage__VariantProps,
    internalArgProps: PlasmicProtectedPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProtectedPage;
/* prettier-ignore-end */
