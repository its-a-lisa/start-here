// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: c8HQ4QDrdFixJwisZHdvQZ
// Component: -v5Jl9daHi4w

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Logo from "../../Logo"; // plasmic-import: eqWxOKkmGwmo/component
import Select from "../../Select"; // plasmic-import: U7q-WXpwL8pf/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_start_here.module.css"; // plasmic-import: c8HQ4QDrdFixJwisZHdvQZ/projectcss
import sty from "./PlasmicNav2.module.css"; // plasmic-import: -v5Jl9daHi4w/css

createPlasmicElementProxy;

export type PlasmicNav2__VariantMembers = {};
export type PlasmicNav2__VariantsArgs = {};
type VariantPropType = keyof PlasmicNav2__VariantsArgs;
export const PlasmicNav2__VariantProps = new Array<VariantPropType>();

export type PlasmicNav2__ArgsType = {
  brandLogo?: React.ReactNode;
};
type ArgPropType = keyof PlasmicNav2__ArgsType;
export const PlasmicNav2__ArgProps = new Array<ArgPropType>("brandLogo");

export type PlasmicNav2__OverridesType = {
  root?: p.Flex<"div">;
  navigationLinks?: p.Flex<"div">;
  select?: p.Flex<typeof Select>;
  select2?: p.Flex<typeof Select>;
  select3?: p.Flex<typeof Select>;
};

export interface DefaultNav2Props {
  brandLogo?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNav2__RenderFunc(props: {
  variants: PlasmicNav2__VariantsArgs;
  args: PlasmicNav2__ArgsType;
  overrides: PlasmicNav2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <Logo className={classNames("__wab_instance", sty.logo__wlG)} />
        ),

        value: args.brandLogo
      })}
      <p.Stack
        as={"div"}
        data-plasmic-name={"navigationLinks"}
        data-plasmic-override={overrides.navigationLinks}
        hasGap={true}
        className={classNames(projectcss.all, sty.navigationLinks)}
      >
        <Select
          data-plasmic-name={"select"}
          data-plasmic-override={overrides.select}
          className={classNames("__wab_instance", sty.select)}
          onChange={(...eventArgs) => {
            p.generateStateOnChangeProp($state, ["select", "value"])(
              eventArgs[0]
            );
          }}
          options={[
            { value: "option1", label: "Option 1" },
            { value: "option2", label: "Option 2" }
          ]}
          placeholder={"Solutions"}
          value={p.generateStateValueProp($state, ["select", "value"])}
        />

        <Select
          data-plasmic-name={"select2"}
          data-plasmic-override={overrides.select2}
          className={classNames("__wab_instance", sty.select2)}
          onChange={(...eventArgs) => {
            p.generateStateOnChangeProp($state, ["select2", "value"])(
              eventArgs[0]
            );
          }}
          options={[
            { value: "option1", label: "Option 1" },
            { value: "option2", label: "Option 2" }
          ]}
          placeholder={"Resources"}
          value={p.generateStateValueProp($state, ["select2", "value"])}
        />

        <Select
          data-plasmic-name={"select3"}
          data-plasmic-override={overrides.select3}
          className={classNames("__wab_instance", sty.select3)}
          onChange={(...eventArgs) => {
            p.generateStateOnChangeProp($state, ["select3", "value"])(
              eventArgs[0]
            );
          }}
          options={[
            { value: "option1", label: "Option 1" },
            { value: "option2", label: "Option 2" }
          ]}
          placeholder={"About Us"}
          value={p.generateStateValueProp($state, ["select3", "value"])}
        />
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navigationLinks", "select", "select2", "select3"],
  navigationLinks: ["navigationLinks", "select", "select2", "select3"],
  select: ["select"],
  select2: ["select2"],
  select3: ["select3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigationLinks: "div";
  select: typeof Select;
  select2: typeof Select;
  select3: typeof Select;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNav2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNav2__VariantsArgs;
    args?: PlasmicNav2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNav2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNav2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNav2__ArgProps,
          internalVariantPropNames: PlasmicNav2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNav2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNav2";
  } else {
    func.displayName = `PlasmicNav2.${nodeName}`;
  }
  return func;
}

export const PlasmicNav2 = Object.assign(
  // Top-level PlasmicNav2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationLinks: makeNodeComponent("navigationLinks"),
    select: makeNodeComponent("select"),
    select2: makeNodeComponent("select2"),
    select3: makeNodeComponent("select3"),

    // Metadata about props expected for PlasmicNav2
    internalVariantProps: PlasmicNav2__VariantProps,
    internalArgProps: PlasmicNav2__ArgProps
  }
);

export default PlasmicNav2;
/* prettier-ignore-end */
