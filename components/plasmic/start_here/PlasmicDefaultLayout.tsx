// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: c8HQ4QDrdFixJwisZHdvQZ
// Component: A2d7WnFA90Fs

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Nav from "../../Nav"; // plasmic-import: mWZvhL92Ok8N/component
import Logo from "../../Logo"; // plasmic-import: eqWxOKkmGwmo/component
import Button from "../../Button"; // plasmic-import: KaXI-_rb8Hbz/component
import Footer from "../../Footer"; // plasmic-import: -v5Jl9daHi4w/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_start_here.module.css"; // plasmic-import: c8HQ4QDrdFixJwisZHdvQZ/projectcss
import sty from "./PlasmicDefaultLayout.module.css"; // plasmic-import: A2d7WnFA90Fs/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: Rjr6r3-9QxlW/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: qWMN0DGk7j4M/icon

createPlasmicElementProxy;

export type PlasmicDefaultLayout__VariantMembers = {};
export type PlasmicDefaultLayout__VariantsArgs = {};
type VariantPropType = keyof PlasmicDefaultLayout__VariantsArgs;
export const PlasmicDefaultLayout__VariantProps = new Array<VariantPropType>();

export type PlasmicDefaultLayout__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicDefaultLayout__ArgsType;
export const PlasmicDefaultLayout__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicDefaultLayout__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultDefaultLayoutProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDefaultLayout__RenderFunc(props: {
  variants: PlasmicDefaultLayout__VariantsArgs;
  args: PlasmicDefaultLayout__ArgsType;
  overrides: PlasmicDefaultLayout__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <Nav
            brandLogo={
              <Logo className={classNames("__wab_instance", sty.logo__tM5F)} />
            }
            className={classNames("__wab_instance", sty.nav__nz744)}
          />
        ),

        value: args.slot
      })}
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {p.renderPlasmicSlot({
          defaultContents: null,
          value: args.children
        })}
      </div>
      <Footer
        data-plasmic-name={"footer"}
        data-plasmic-override={overrides.footer}
        className={classNames("__wab_instance", sty.footer)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "footer"],
  freeBox: ["freeBox"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDefaultLayout__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDefaultLayout__VariantsArgs;
    args?: PlasmicDefaultLayout__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDefaultLayout__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDefaultLayout__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDefaultLayout__ArgProps,
          internalVariantPropNames: PlasmicDefaultLayout__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDefaultLayout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDefaultLayout";
  } else {
    func.displayName = `PlasmicDefaultLayout.${nodeName}`;
  }
  return func;
}

export const PlasmicDefaultLayout = Object.assign(
  // Top-level PlasmicDefaultLayout renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicDefaultLayout
    internalVariantProps: PlasmicDefaultLayout__VariantProps,
    internalArgProps: PlasmicDefaultLayout__ArgProps
  }
);

export default PlasmicDefaultLayout;
/* prettier-ignore-end */
