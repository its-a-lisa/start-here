// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: c8HQ4QDrdFixJwisZHdvQZ
// Component: xA16lXqVu7N9

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: DmOz5TzcbjbY/component
import Button from "../../Button"; // plasmic-import: KaXI-_rb8Hbz/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_start_here.module.css"; // plasmic-import: c8HQ4QDrdFixJwisZHdvQZ/projectcss
import sty from "./PlasmicAuth.module.css"; // plasmic-import: xA16lXqVu7N9/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: FJzGDMAH2bam/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: Rjr6r3-9QxlW/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: qWMN0DGk7j4M/icon

createPlasmicElementProxy;

export type PlasmicAuth__VariantMembers = {
  isSignUp: "isSignUp";
};
export type PlasmicAuth__VariantsArgs = {
  isSignUp?: SingleBooleanChoiceArg<"isSignUp">;
};
type VariantPropType = keyof PlasmicAuth__VariantsArgs;
export const PlasmicAuth__VariantProps = new Array<VariantPropType>("isSignUp");

export type PlasmicAuth__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicAuth__ArgsType;
export const PlasmicAuth__ArgProps = new Array<ArgPropType>("children");

export type PlasmicAuth__OverridesType = {
  authForm?: p.Flex<"form">;
  emailInput?: p.Flex<typeof TextInput>;
  passwordInput?: p.Flex<typeof TextInput>;
  freeBox?: p.Flex<"div">;
  submitButton?: p.Flex<typeof Button>;
};

export interface DefaultAuthProps {
  children?: React.ReactNode;
  isSignUp?: SingleBooleanChoiceArg<"isSignUp">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAuth__RenderFunc(props: {
  variants: PlasmicAuth__VariantsArgs;
  args: PlasmicAuth__ArgsType;
  overrides: PlasmicAuth__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "emailInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "passwordInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "isSignUp",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isSignUp
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <p.Stack
      as={"form"}
      data-plasmic-name={"authForm"}
      data-plasmic-override={overrides.authForm}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.authForm,
        { [sty.authFormisSignUp]: hasVariant($state, "isSignUp", "isSignUp") }
      )}
    >
      <TextInput
        data-plasmic-name={"emailInput"}
        data-plasmic-override={overrides.emailInput}
        className={classNames("__wab_instance", sty.emailInput)}
        onChange={(...eventArgs) => {
          p.generateStateOnChangeProp($state, ["emailInput", "value"])(
            (e => e.target?.value).apply(null, eventArgs)
          );
        }}
        value={p.generateStateValueProp($state, ["emailInput", "value"]) ?? ""}
      />

      <TextInput
        data-plasmic-name={"passwordInput"}
        data-plasmic-override={overrides.passwordInput}
        className={classNames("__wab_instance", sty.passwordInput)}
        onChange={(...eventArgs) => {
          p.generateStateOnChangeProp($state, ["passwordInput", "value"])(
            (e => e.target?.value).apply(null, eventArgs)
          );
        }}
        type={"password"}
        value={
          p.generateStateValueProp($state, ["passwordInput", "value"]) ?? ""
        }
      />

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxisSignUp]: hasVariant($state, "isSignUp", "isSignUp")
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Don't have an account? Sign up instead",
          value: args.children
        })}
      </div>
      <Button
        data-plasmic-name={"submitButton"}
        data-plasmic-override={overrides.submitButton}
        className={classNames("__wab_instance", sty.submitButton, {
          [sty.submitButtonisSignUp]: hasVariant($state, "isSignUp", "isSignUp")
        })}
      >
        {hasVariant($state, "isSignUp", "isSignUp") ? "Signup" : "Login"}
      </Button>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  authForm: [
    "authForm",
    "emailInput",
    "passwordInput",
    "freeBox",
    "submitButton"
  ],
  emailInput: ["emailInput"],
  passwordInput: ["passwordInput"],
  freeBox: ["freeBox"],
  submitButton: ["submitButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  authForm: "form";
  emailInput: typeof TextInput;
  passwordInput: typeof TextInput;
  freeBox: "div";
  submitButton: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAuth__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAuth__VariantsArgs;
    args?: PlasmicAuth__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAuth__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAuth__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAuth__ArgProps,
          internalVariantPropNames: PlasmicAuth__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAuth__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "authForm") {
    func.displayName = "PlasmicAuth";
  } else {
    func.displayName = `PlasmicAuth.${nodeName}`;
  }
  return func;
}

export const PlasmicAuth = Object.assign(
  // Top-level PlasmicAuth renders the root element
  makeNodeComponent("authForm"),
  {
    // Helper components rendering sub-elements
    emailInput: makeNodeComponent("emailInput"),
    passwordInput: makeNodeComponent("passwordInput"),
    freeBox: makeNodeComponent("freeBox"),
    submitButton: makeNodeComponent("submitButton"),

    // Metadata about props expected for PlasmicAuth
    internalVariantProps: PlasmicAuth__VariantProps,
    internalArgProps: PlasmicAuth__ArgProps
  }
);

export default PlasmicAuth;
/* prettier-ignore-end */
