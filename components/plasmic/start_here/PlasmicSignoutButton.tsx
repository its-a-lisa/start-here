// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: c8HQ4QDrdFixJwisZHdvQZ
// Component: HsD9axl_NxPj

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: KaXI-_rb8Hbz/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_start_here.module.css"; // plasmic-import: c8HQ4QDrdFixJwisZHdvQZ/projectcss
import sty from "./PlasmicSignoutButton.module.css"; // plasmic-import: HsD9axl_NxPj/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: Rjr6r3-9QxlW/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: qWMN0DGk7j4M/icon

createPlasmicElementProxy;

export type PlasmicSignoutButton__VariantMembers = {};
export type PlasmicSignoutButton__VariantsArgs = {};
type VariantPropType = keyof PlasmicSignoutButton__VariantsArgs;
export const PlasmicSignoutButton__VariantProps = new Array<VariantPropType>();

export type PlasmicSignoutButton__ArgsType = {};
type ArgPropType = keyof PlasmicSignoutButton__ArgsType;
export const PlasmicSignoutButton__ArgProps = new Array<ArgPropType>();

export type PlasmicSignoutButton__OverridesType = {
  logOutButton?: p.Flex<typeof Button>;
};

export interface DefaultSignoutButtonProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSignoutButton__RenderFunc(props: {
  variants: PlasmicSignoutButton__VariantsArgs;
  args: PlasmicSignoutButton__ArgsType;
  overrides: PlasmicSignoutButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <Button
      data-plasmic-name={"logOutButton"}
      data-plasmic-override={overrides.logOutButton}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.logOutButton)}
      link={`/`}
    >
      {"Log Out"}
    </Button>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  logOutButton: ["logOutButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  logOutButton: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSignoutButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSignoutButton__VariantsArgs;
    args?: PlasmicSignoutButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSignoutButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSignoutButton__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSignoutButton__ArgProps,
          internalVariantPropNames: PlasmicSignoutButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSignoutButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "logOutButton") {
    func.displayName = "PlasmicSignoutButton";
  } else {
    func.displayName = `PlasmicSignoutButton.${nodeName}`;
  }
  return func;
}

export const PlasmicSignoutButton = Object.assign(
  // Top-level PlasmicSignoutButton renders the root element
  makeNodeComponent("logOutButton"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicSignoutButton
    internalVariantProps: PlasmicSignoutButton__VariantProps,
    internalArgProps: PlasmicSignoutButton__ArgProps
  }
);

export default PlasmicSignoutButton;
/* prettier-ignore-end */
